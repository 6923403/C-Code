array.h

#pragma once

#include <iostream>

using namespace std;

class myarray

{

public:

myarray(); //默认构造 100个容量

myarray(int capacity); //有参构造函数 用户指定容量初始化

myarray(const myarray & array); //拷贝构造函数

~myarray();

//尾插法

void puch_back(int val);

//获得指定位置数据

int getdata(int	index);

//根据位置设置值

void setdata(int index, int val);

//获取数组大小

int getsize();

//获取数组容量

int getcapacity();

private:

int * paddress; //指向真正存储数据的指针

int m_size; //尺寸

int m_capacity; //容量

};

---------------------*
array.cpp

#include "array.h"

//默认构造

myarray::myarray()

{

this -> m_capacity = 100;

this -> m_size = 0;

this -> paddress = new int[this -> m_capacity]; //开辟数组

}

//有参构造 参数 数组容量

myarray::myarray(int capacity)

{

cout << "有参函数调用"  << endl;

this -> m_capacity = capacity;

this -> m_size = 0;

this -> paddress = new int[this -> m_capacity];

}

//拷贝构造

myarray::myarray(const myarray & array) //拷贝构造函数

{

cout << "拷贝构造函数" << endl;

this -> paddress = new int[array.m_capacity]; //开辟大小

this -> m_size = array.m_size;

this -> m_capacity = array.m_capacity;

for (int i = 0; i< array.m_size; i++)

{

this -> paddress[i] = array.paddress[i]; //取值

}

}

//析构

myarray::~myarray()

{

cout << "析构函数" << endl;

if(this -> paddress != NULL)

{

delete[] this -> paddress;

this -> paddress = NULL;

}

}

void myarray::puch_back(int val)

{

this -> paddress[this -> m_size] = val;

this -> m_size++;

}

int myarray::getdata(int index)

{

return this -> paddress[index];

}

void myarray::setdata(int index, int val)

{

this -> paddress[index] = val;

}

//获取数组大小

int myarray::getsize()

{

return this -> m_size;

}

//获取数组容量

int myarray::getcapacity()

{

return this -> m_capacity;

}

---------------------*
main.cpp

void test1()

{

//堆区创建数据

myarray * array = new myarray(30);

myarray * array2 = new myarray(*array);//new方式调用指定拷贝构造

myarray array3 = * array2; //拷贝构造 构造函数返回本体

delete array;

for(int i = 0; i < 10; i++)

{

array2 -> puch_back(i);

}

for(int i = 0; i < 10; i++ )

{

cout << array2 -> getdata(i);

}

//设置值测试

array2 -> setdata(0, 100);

cout << array2 -> getdata(0) << endl;

//获取数组大小

cout << "array2 数组大小为 = " << array2 -> getsize() << endl;

//获取数组容量

cout << "array2 数组容量为 = " << array2 -> getcapacity() << endl;

}
