#include <stdexcept>

using namespace std;

void test1()

{

    string str; //默认构造

    string str2(str); //拷贝构造

    string str3 = str;

    string str4 = "abcd";

    string str5(10, 'a');

    cout << str4 << endl;

    cout << str5 << endl;

    //基本赋值

    str = "hello";

    str2 = str4;

    str3.assign("abcdef", 4); //把字符串前N个字符 赋值给当前的字符串

    cout << str3 << endl;

    string str6; //将S从start开始n个字符赋值给字符串

    str6.assign(str, 1, 3);

    cout << str6 << endl;

}

void test2()

{

    string s = "abcdef";



    for(int i = 0; i < s.size(); i++ )

    {

      // cout << s[i] << endl;//通过[]取字符

        cout << s.at(i) << endl;//通过at取字符

    }

    //[] at 区别[]访问越界直接挂  at会抛出异常

    try

    {

        cout << s.at(66) << endl;

    }

    catch(out_of_range & e)

    {

        cout << e.what() << endl;

    }

    catch(...)

    {

        cout << "越界异常" << endl;

    }



}

void test3()

{

    //拼接

    string s1 = "sss";

    string s2 = "111";

    s1 += s2;

    cout << s2 << endl;

    s1.append("222");

    cout << s1 << endl;

}

void test4()

{

    //查找

    string s = "123456789";

    int pos = s.find("23"); //找不到返回 -1

    cout << "pos = " << pos << endl;



    int pos2 = s.rfind("45"); //从右往左查找 输出位置 3

    cout << "pos2 = " << pos2 << endl;

}

void test5()

{

    //替换

    string s = "qwertyu";

    s.replace(1, 3,"123"); //三个字符 wer 替换为111 也可以替换为123456789 输出q123456789tyu

    cout << s << endl; //q123tyu

}

void test6()

{

    string s1 = "bbc";

    string s2 = "a";

    if(s1.compare(s2) == 0)

    {

        cout << "s1 == s2" << endl;

    }

    else if(s1.compare(s2) == 1)

    {

        cout << "s1 > s2" << endl;

    }

    else

    {

        cout << "s1 < s2 " << endl;

    }



}

//string 子串

void test7()

{

    string s1 = "12345";

    string s2 = s1.substr(1, 3);

    cout << "s2 = " << s2 << endl; //234

    //查找一个邮件的用户名

    string email = "12345@qq.com";

    int pos = email.find("@");

    string username = email.substr(0, pos);

    cout << "用户名 ； " << username << endl;

}

//string 插入和删除

void test8()

{

    string s1 = "123456";

    s1.insert(1, "666"); //插入

    cout << s1 << endl;



    //删除

    s1.erase(1, 3);

    cout << s1 << endl;

}

void func(string a)

{

    cout << a << endl;

}

void func(char * a)

{

    cout << a << endl;

}

void func2(const char * a)

{

    cout << a << endl;

}

//string 和 c-style 字符串转换

void test9()

{

    string a = "abc";

    //string -> const char*

    const char * p = a.c_str();

    func(a); //const char* 隐式类型转换 string



    //const string -> char*

    string s2(p);

    //func2(s2); string 不能隐式转换为char *

}

void test10()

{

    string s = "abcdefg";

    char & a = s[2];

    char & b = s[3];

    a = '1';

    b = '2';

    cout << s << endl; //ab12efg

    cout << (int *)s.c_str() << endl;

    s = "pppppppp";

    // a = '1';

    // b = '2'; //重新分配内存 原来赋值实效

    cout << s << endl;

    cout << (int *)s.c_str() << endl;

}

//string 字符串转换字母大小写

void test11()

{

    string s = "abCdEfg";

    for(int i = 0; i < s.size(); i++)

    {

        //s[i] = toupper(s[i]);大写

        s[i] = tolower(s[i]); //小写

    }

    cout << s << endl;

}
