#include <vector>

#include <algorithm>

#include <numeric>

#include <iterator>

using namespace std;

void test1() //两个集合的交集

{

    vector<int> k1;

    vector<int> k2;

    for(int i = 0; i < 10; i++)

    {

        k1.push_back(i);

        k2.push_back(i + 3);

    }

    vector<int> vtarget;

    vtarget.resize(min(k1.size(), k2.size()));



    vector<int>::iterator pos = set_intersection(k1.begin(), k1.end(), k2.begin(), k2.end(), vtarget.begin());

    copy(vtarget.begin(), pos, ostream_iterator<int>(cout, " "));

}

void test2() //两个集合的并集

{

    vector<int> s1;

    vector<int> s2;

    for(int i = 0; i < 10; i++)

    {

        s1.push_back(i);

        s2.push_back(i + 3);

    }

    vector<int> vtarget;

    vtarget.resize(s1.size() + s2.size());



    vector<int>::iterator pos = set_union(s1.begin(), s1.end(), s2.begin(), s2.end(), vtarget.begin());

    copy(vtarget.begin(), pos, ostream_iterator<int>(cout, " "));

}

void test3() //两个集合的差集

{

    vector<int> c1;

    vector<int> c2;

    for(int i = 0; i < 10; i++)

    {

        c1.push_back(i);

        c2.push_back(i + 3);

    }

    vector<int> vtarget;

    vtarget.resize(max(c1.size(), c2.size()));



    vector<int>::iterator pos = set_difference(c1.begin(), c1.end(), c2.begin(), c2.end(), vtarget.begin());

    copy(vtarget.begin(), pos, ostream_iterator<int>(cout, " "));

    cout << endl;

    //v2 差 v1

    vector<int>::iterator pos2 = set_difference(c2.begin(), c2.end(), c1.begin(), c1.end(), vtarget.begin());

    copy(vtarget.begin(), pos2, ostream_iterator<int>(cout, " "));

}


