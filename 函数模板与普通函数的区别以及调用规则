//1.普通函数与函数模板的区别

template<class T>

T myplus(T a, T b)

{

    return a + b;

}

int myplus2(int a, int b)

{

    return a + b;

}

void test1()

{

    int a = 10;

    int b = 20;

    char c = 'c';

    //myplus(a, c); //类型推导不出来 函数模板不可以进行隐式类型转换

    cout << myplus2(a, c) << endl; //普通函数可以进行隐式类型转换

}

//2.普通函数和函数模板的调用规则

template<class T>

void myprint(T a, T b)

{

    cout << "模板的调用 " << endl;

}

template<class T>

void myprint(T a, T b, T c)

{

    cout << "模板的调用abc " << endl;

}

// void myprint(int a, int b); //函数的声明

// void myprint(int a, int b)  //重载

// {

//    cout << "普通函数调用" << endl;

////如果没有实现 报错

// }

void test2()

{

    int a = 10;

    int b = 20;

//  myprint(a, b); //1.如果出现重载优先使用普通函数

    //2.如果想强制使用模板，可以使用空参数列表

  // myprint<>(a, b);

    //3.函数模板可以发生重载

    int c = 30;

    myprint(a, b, c);

    //4.如果函数模板可以产生更好的匹配 ， 那么有限调用函数模板

    char c1 = 'c';

    char d = 'd';

    myprint(c1, d);

}
