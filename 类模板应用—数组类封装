1.hpp

#pragma once

#include <iostream>

using namespace std;

template<class T>

class myarray

{

    public:

    explicit myarray(int capacity)

    {

        this -> m_capacity = capacity; //防止隐式类型转换  防止这种写法myarray arr = 10;

        this -> m_size = 0;

        this -> paddress = new T[this -> m_capacity]; //开辟一块空间

    }

    myarray(const myarray & array)

    {

        this -> m_capacity = array.m_capacity;

        this -> m_size = array.m_size;

        this -> paddress = new T[this -> m_capacity];

        for(int i = 0; i < m_size; i++)

        {

            this -> paddress[i] = array[i];

        }

    }

    ~myarray()

    {

        if(this -> paddress != NULL)

        {

            delete[] this -> paddress;

            this -> paddress = NULL;

        }

    }

    //赋值操作符重载

    myarray & operator=(myarray & array)

    {

        //先判断原始数据，有就清空

        if(this -> paddress != NULL)

        {

            delete[] this -> address;

            this -> address = NULL;

        }

        this -> m_capacity = array.m_capacity;

        this -> m_size = array.m_size;

        this -> paddress = new T[this -> m_capacity];

        for(int i = 0; i < m_size; i++)

        {

            this -> paddress[i] = array[i];

        }

    }

    //[]重载

    T & operator[](int index)

    {

        return this -> paddress[index];

    }

    //尾插法

    void push_back(T val)

    {

        this -> paddress[this -> m_size] = val;

        this -> m_size++;

    }

    //获取大小

    int getsize()

    {

        return m_size;

    }

    //获取容量

    int getcapacity()

    {

        return this -> m_capacity;

    }

    private:

    T * paddress; //指向堆区指针

    int m_capacity;

    int m_size;

};


-----------------------*

main.cpp

//输出int类型数组方法

void printfarray(myarray<int>& array)

{

    for(int i = 0; i < array.getsize(); i++)

    { 

        cout << array[i] << endl;

    }

}

int main()

{

    myarray <int>arr(10);

    for(int i = 0; i < 10; i++)

    {

        arr.push_back( i + 100);

    }

    printfarray(arr);

    return EXIT_SUCCESS;

}
