//让编译器看到person类的声明

template<class T1, class T2>class person;

//让编译器提前看到printperson的声明

template<class T1, class T2>void printperson(person<T1, T2> &p);

template<class T1, class T2>

class person

{

    //友元函数类内实现 /利用空参数列表 告诉编译器 模板函数的声明

    friend void printperson<>(person<T1, T2> &p); //void printperson(person<T1, T2> &p); 普通函数

    // {

    //    cout << "姓名 = " << p.m_name << endl;

    //    cout << "年龄 = " << p.m_age << endl;

    // }

    public:

    person(T1 name, T2 age)

    {

        this -> m_name = name;

        this -> m_age = age;

    }

    private:

    T1 m_name;

    T2 m_age;



};

//类外实现

template<class T1, class T2>

void printperson(person<T1, T2> &p)

{

    cout << "姓名 = " << p.m_name << endl;

    cout << "年龄 = " << p.m_age << endl;

}

void test1()

{

    person<string, int>p("ss", 10);

    printperson(p);

}

