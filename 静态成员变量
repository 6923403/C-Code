//静态成员变量必须在类中声明，在类外定义。

//静态数据成员不属于某个对象，在为对象分配空间中不包括静态成员所占空间。

//静态数据成员可以通过类名或者对象名来引用。


#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

class person

{

public:

person()

{

}

static int m_age; //静态成员变量，会共享数据

//静态成员变量，在类内声明，类外进行初始化

//静态成员函数

//不可以访问普通成员变量 可以访问静态成员变量

static void func()

{

cout << " func的调用 " << endl;

}

//静态成员变量也是有权限的

int m_A;

//普通成员函数 可以访问普通成员变量 也可以访问静态成员变量

void mufunc()

{

m_A = 100;

m_age = 100;

}

private:

static int m_other; //私有权限 在类内不可访问

void func2()

{

cout << "func2 调用" << endl;

}

};

int person::m_age = 0; // 类外初始化

int person::m_other = 10; //编译器看为类内初始化

void test1()

{

//通过对象访问属性

person p1;

p1.m_age = 10;

person p2;

p2.m_age = 20;

cout << " p1 = " << p1.m_age << endl;

cout << " p2 = " << p2.m_age << endl;

//共享数据

cout << "通过类名访问Age " << person::m_age << endl;

//cout << " other = " << person::m_other << endl; 不可访问

//静态成员函数调用 不可以访问普通成员变量

p1.func();

p2.func();

person::func();

//静态成员函数也是有权限的

}

int main()

{

test1();

system("pause");

return EXIT_SUCCESS;

}
