#include <vector>

#include <algorithm>

#include <iterator>

using namespace std;

void test1()

{

    vector<int> v;

    for(int i = 0; i < 10; i++)

    {

        v.push_back(i);

    }

    vector<int>vtarget;

    vtarget.resize(v.size());

    copy(v.begin(), v.end(), vtarget.begin());

    for_each(vtarget.begin(), vtarget.end(), [](int val){cout << val << endl;});

    //打印方法2  #include <iterator>

    copy(vtarget.begin(), vtarget.end(), ostream_iterator<int>(cout, " "));

}

class pcompare

{

    public:

    bool operator()(int v)

    {

        return v > 3;

    }

};

void test2() //指定范围元素替换  //2.满足条件的元素替换

{

    vector<int> a;

    for(int i = 0; i < 10; i++)

    {

        a.push_back(i);

    }

    //需求 把容器中的3 替换成300

    replace(a.begin(), a.end(), 3, 300);

    copy(a.begin(), a.end(), ostream_iterator<int>(cout, " "));

    //需求 把容器中 > 的3 替换成3000

    replace_if(a.begin(), a.end(), pcompare(), 3000);

    copy(a.begin(), a.end(), ostream_iterator<int>(cout << "  "));

}   

void test3() //交换两个容器中的数据

{

    vector<int> q1;

    vector<int> q2;

    for(int i = 0; i < 10; i++)

    {

        q1.push_back(i);

        q2.push_back(i + 2);

    }

    cout << "v1" << endl;

    copy(q1.begin(), q1.end(), ostream_iterator<int>(cout << " "));

    cout << endl;

    cout << "v2 " << endl;

    copy(q2.begin(), q2.end(), ostream_iterator<int>(cout << " "));

    cout << endl;



    cout << "交换" << endl;

    swap(q1, q2);

    copy(q1.begin(), q1.end(), ostream_iterator<int>(cout << " "));

    copy(q2.begin(), q2.end(), ostream_iterator<int>(cout << " "));

}
