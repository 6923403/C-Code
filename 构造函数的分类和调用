#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
#include <string>

//Now here's the sun, come to dry the rain

//参数分类
//按照参数进行分类 无参构造函数（默认构造函数） 有参构造函数
//按照类型进行分类 普通构造函数 拷贝构造函数
class person
{
public: //构造和析构必须在公共权限下才能调用
	person() //默认、无参构造函数
	{
		cout << "默认构造函数" << endl;
	}
	//有参构造
	person(int a)
	{
		
		cout << "有参构造函数调用"  << endl;
	}
	//拷贝构造
	person(const person& p)
	{
		mage = p.mage;
		cout << "拷贝构造函数" << endl;
	}
	//析构函数
	~person()
	{
		cout << "析构函数调用" << endl;
	}

	int mage;
};

void test1()
{
	//构造函数调用方式
	//括号法调用
	person p1(1);
	p1.mage = 10;	
	person p2(p1);
	cout << "p2 age = " <<p2.mage << endl;	
	person p3; //默认构造函数 不加() persone p3();编译器认为这行是函数的声明	
	//显示法调用
	person p4 = person(100);
	person p5 = person(p4);
	//person(100); 叫做匿名对象，特点：如果编译器发现对象是匿名的，那么在这行代码结束后就释放这个对象
	//不能用拷贝构造函数 初始化匿名对象 
	person(p6) = person(p5);// 如果写成左值（person(p5)），编译器认为你写成 person p5：对象的声明
	//如果写成右值 那么可以通过

	person p7 = 100; //person p7 = person(100); 隐式类型转换
	//person p8 = p7; 相当于person p8 = person(p7);	
}

int main()
{
	test1();
	system("pause");
	return EXIT_SUCCESS;
}
