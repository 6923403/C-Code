#include <algorithm>



bool mycompare(int v1, int v2)

{

    return v1 > v2;

}

//排序 sort

void test3()

{ 

    deque<int> d;

    d.push_back(15);

    d.push_back(12);

    d.push_back(26);

    d.push_back(47);

    printdeque(d);

    //排序

    sort(d.begin(), d.end());

    printdeque(d);

    //从大到小

    sort(d.begin(), d.end(), mycompare);

    printdeque(d);

}

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

#include <string>

#include <vector>

#include <deque>

#include <algorithm>

using namespace std;

class person

{

    public:

    person(string name, int socure)

    {

        this -> m_name = name;

        this -> m_socure = socure;

    }

    string m_name;

    int m_socure;



};

void createperson(vector<person> &v)

{

    string nameseed = "ABCDE";

    for(int i = 0; i < 5; i++)

    {

        string name = "选手";

        name += nameseed[i];

        int socure = 0;

        person p(name, socure);

        v.push_back(p);

    }

}

void setsocre(vector<person> &v)

{

    for(vector<person>::iterator it = v.begin(); it != v.end(); it++)

    {

        //对5个人打分

        deque<int> d;

        for(int i = 0; i < 10; i++)

        {

            int socre = rand() %41 +60; //60 - 100

            d.push_back(socre);

        }

        //测试打分

        // for(deque<int>::iterator it2 = d.begin(); it2 != d.end(); it2++)

        // {

        //    cout << *it2 << endl;

        // }

        //排序

        sort(d.begin(), d.end());

        //去除最高和最低

        d.pop_back(); //最高

        d.pop_front(); //最低

        int sum = 0; //总分

        for(deque<int>::iterator it3 = d.begin(); it3 != d.end(); it3++)

        {

            sum += * it3;           

        }

        //平均分

        int avg = sum / d.size();

        it -> m_socure = avg;

    }

}

void showscore(vector<person> &v)

{

    for(vector<person>::iterator it = v.begin(); it != v.end(); it++)

    {

        cout << "姓名： " << it -> m_name << "  分数 : " << it -> m_socure << endl;

    }

}

int main()

{

    //创建容器 存放选手

    vector<person> v;

    //创建5名选手

    createperson(v);

    // for(vector<person>::iterator it = v.begin(); it != v.end(); it++)

    // {

    //    cout << "名字" << (*it).m_name << endl;



    // }

    setsocre(v);

    //展示平均分

    showscore(v);

    return EXIT_SUCCESS;

}
