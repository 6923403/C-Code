#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;

class person
{
public:

	person(int age)
	{
		this -> m_age = age;
	}

	void showage()
	{
		cout << "年龄为 = " << this -> m_age << endl;

	}

	~person()
	{
		cout << "析构 " << endl;
	}

	int m_age; 
};


//智能指针
//用来托管自定义类型对象，让对象进行自动的释放
class smartpointer
{
public:
	smartpointer(person * person)
	{
		this -> person = person;
	}

	//重载 -> 让智能指针对象 像person *p 一样使用
	person * operator->()
	{
		return this->person;
	}

	//重载*
	person & operator*()
	{
		return * this -> person;
	}

	~smartpointer()
	{
		cout << "智能指针析构" << endl;
		if(this -> person != NULL)
		{
			
			delete this -> person; 
			this -> person = NULL; 
		}
	}

private: //维护这个指针
	person * person;

};


void test1()
{
	//person p1(10) 自动析构
	//person * p1 = new person(10);
	////delete p1;
	smartpointer sp(new person(10)); //开辟到了栈上，自动的释放 
	sp -> showage(); //sp->->showage();	

	(*sp).showage();
}

int main()
{
	test1();
	system("pause");
	return EXIT_SUCCESS;
}
