student.h 

#ifndef STUDENT_H

#define STUDENT_H

#include

class student : public QObject

{

    Q_OBJECT

public:

    explicit student(QObject *parent = nullptr);

signals:

public slots:

    //自定义槽函数

    //高版本可以写到public下 或者全局函数

    //槽函数返回值也是void

    //槽函数需要声明 也需要实现

    //槽函数可以有参数 也可以发生重载

    void study();

    void treat(QString textbook);

};

#endif // STUDENT_H

-------------

teacher.h

#ifndef TEACHER_H

#define TEACHER_H

#include

class teacher : public QObject

{

    Q_OBJECT

public:

    explicit teacher(QObject *parent = nullptr);

signals:

    //自定义信号 需要写到signals下

    //返回类型必须是void

    //信号只需要声明 不需要实现

    //信号可以有参数(int, dobule等) 也可以重载

    void teach();

    void teach(QString subject);

public slots:

};

#endif // TEACHER_H

-------------

widget.h

#ifndef WIDGET_H

#define WIDGET_H

#include

#include "teacher.h"

#include "student.h"

class Widget : public QWidget

{

    Q_OBJECT

public:

    Widget(QWidget *parent = 0);

    ~Widget();

    teacher * zt;

    student * st;

    void classover();

};

#endif // WIDGET_H

-----------------------------

student.cpp

#include "student.h"

#include

student::student(QObject *parent) : QObject(parent)

{

}

void student::study()

{

    qDebug() << "认真听讲";

}

void student::treat(QString textbook)

{

    //qDebug() << "拿出课本, 老师讲到 ：" << textbook ;

    //QString转换char *  先转成Qsytearray类型 再转char *

    qDebug() << "拿出课本, 老师讲到 ：" << textbook.toUtf8().data();

}

------------------------

widget.cpp

#include "widget.h"

//创建两个类  teacher类 sudent类

//响铃 teacher zt 发出信号 上课

//学生响应 student st 处理信号的槽函数 听课

Widget::Widget(QWidget *parent)

    : QWidget(parent)

{

    zt = new teacher(this);

    st = new student(this);

    //连接老师和学生

    // connect(zt, &teacher::teach, st, &student::study);

    //有参数信号和槽函数连接

    //函数指针 指向函数地址

    void(teacher:: *teacherSignal)(QString) = &teacher:: teach;

    void(student:: *stbook)(QString) = &student:: treat;

    connect(zt, teacherSignal, st, stbook);

    //下课

    classover();

}

void Widget::classover()

{

    //触发老师上课的信号

    //老师上课的信号属于自定义信号， 触发自定义信号关键字 emit

    emit zt -> teach(); //触发无参信号

    emit zt -> teach("chemical");

}

Widget::~Widget()

{

}
