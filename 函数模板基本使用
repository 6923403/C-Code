//交换int类型两个数字
void myswapint(int &a, int &b)
{
    int tmp = a;
    a = b;
    b = tmp;
}

//交换double
void myswapdouble(double & a, double & b)
{
    double tmp = a;
    a = b;
    b = tmp;
}

//类型 逻辑又非常相似
//类型参数化  泛型编程 -- 模板技术
//告诉编译器下面如果出现T不要报错 T是一个通用的类型
template<class T>
void myswap(T &a, T &b)
{
    T tmp = a;
    a = b;
    b = tmp;
}

//template<typename T> 与 template<class T>功能相同
template<typename T>
void myswap2()
{

}


void test1()
{
    int a = 10;
    int b = 20;
    // char c1 = 'c'
    myswap(a, b);
    //自动类型推导， 必须有参数类型才可推导

    //2.显示指定类型
    myswap<int>(a , b);

    //3.模板必须指出T才可以使用
    myswap2<double>(); //指出类型

    cout << "a = " << a << endl;
    cout << "b = " << b << endl;

    double c = 3.14;
    double d = 2.23;
    myswap(c, d);
}
