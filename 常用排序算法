
#include <vector>

#include <algorithm>

#include <functional>

#include <ctime>

using namespace std;

void test1() //容器元素合并 并存储到另一容器中

{

    vector<int> p1;

    vector<int> p2;



    for(int i = 0; i < 10; i++)

    {

        p1.push_back(i);

        p2.push_back(i);

    }

    vector<int>ptarget;

    ptarget.resize(p1.size() + p2.size());

    merge(p1.begin(), p1.end(), p2.begin(), p2.end(), ptarget.begin());

    for_each(ptarget.begin(), ptarget.end(), [](int v){cout << v << endl;});

}

void test2() //容器元素排序

{

    vector<int> q;

    q.push_back(10);

    q.push_back(20);

    q.push_back(90);

    q.push_back(2);

    q.push_back(5);

    sort(q.begin(), q.end());

    for_each(q.begin(), q.end(), [](int v){ cout << v << endl;}); //小到大

    sort(q.begin(), q.end(), greater<int>());

    for_each(q.begin(), q.end(), [](int v){ cout << v << endl;}); //从大到小

}

void test3() //对指定范围内的元素随机调整次序

{

    vector<int> x;



    for(int i = 0; i < 10; i++)

    {

        x.push_back(i);

    }

    random_shuffle(x.begin(), x.end());

    for_each(x.begin(), x.end(), [](int v){ cout << v << endl;}); //主函数 随机种子 srand((unsigned int)time(NULL));

}

void test4() //反转指定范围的元素 倒序输出

{

    vector<int> d;

    vector<int> x;

    d.push_back(10);

    d.push_back(20);

    d.push_back(90);

    d.push_back(2);

    d.push_back(5);

    reverse(d.begin(), d.end());

    for_each(d.begin(), d.end(), [](int v){ cout << v << endl;});

}
