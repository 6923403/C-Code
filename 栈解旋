class person

{

    public:

    person()

    {

        cout << "person 构造" << endl;

    }

    ~person()

    {

        cout << "person 析构 " << endl;

    }

};

class myException //自定义异常

{

    public:

    void printError()

    {

        cout << "自定义的异常" << endl;

    }

};

int mydevide(int a, int b)

{

    if(b == 0)

    {

        //栈解旋

        //try到throw抛出异常之前  所有栈上的对象 都会被释放

        //构造和析构顺序是相反的

        person p1;

        person p2;

        throw myException(); //匿名对象

    }

    return a / b;

}

void test1()

{

    int a = 10;

    int b = 0;

  // int ret = mydevide(a, b);  //早期如果返回-1 无法区分结果还是异常



  //C++中异常处理

  try //

  {

      mydevide(a, b);

  }

  catch(int)//捕获int异常

  {

      cout << "int 类型 异常捕获" << endl;

  }

  catch(double) //捕获double

  {

      //如果不想处理这个异常 可以向上抛出

      throw;

      cout << "double 类型 异常捕获" << endl;

  }

  catch(myException e)

  {

      e.printError();

  }

  catch(...)

  {

      cout << "other 类型 异常捕获" << endl;

  }



}
