class base1

{

public:

int m_a;

protected:

int m_b;

private:

int m_c;

};

//公有继承

class son1 :public base1

{

public:

void func()

{

cout << m_a << endl; //基类中公有属性 可继承 还是public

//cout << m_c << endl; //基类中私有的属性  不可继承

cout << m_b << endl; //基类中保护的属性 可继承 还是protected  类外访问不到

}

};

void myfunc()

{

son1 s1;

s1.m_a;

}

//保护继承

class base2

{

public:

int m_a;

protected:

int m_b;

private:

int m_c;

};

class son2 :protected base2

{

public:

void func()

{

//cout << m_c << endl; //基类中私有的属性  不可继承

cout << m_a << endl; //基类中公有属性 可继承 还是protected

cout << m_b << endl; //基类中保护属性 可继承 还是protected

}

};

void myfunc2()

{

son2 s;

//s.m_a;

}

//私有继承

class base3

{

public:

int m_a;

protected:

int m_b;

private:

int m_c;

};

class son3 :private base3

{

public:

void func()

{

//cout << m_c << endl; //基类中私有的属性  不可继承

cout << m_a << endl; //基类中公有属性 可继承 private

cout << m_b << endl; //基类中保护属性 可继承 private

}

};

class grandson3 :public son3

{

public:

void myfunc()

{

//cout << m_a << endl; //孙子类中 访问不到m_a 因为在son3已经有私有属性了

}

};

void myfunc3()

{

son3 s;

//s.m_a;

}
