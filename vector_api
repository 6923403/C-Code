





void printvector(vector<int> & v)

{

    for(vector<int>:: iterator it = v.begin(); it != v.end(); it++)

    {

        cout << *it << " " << endl ;

    }

}

void test2()

{

    vector<int> v;

    v.push_back(10);

    v.push_back(20);

    v.push_back(30);

    v.push_back(40);

    cout << v.front() << endl; //返回容器中第一个元素数据

    cout << v.back() << endl; //返回容器中最后一个元素数据

    v.insert(v.begin(), 2, 100); //放入两个100

    //参数1  迭代器 //参数2 N个数 //参数3 具体插入的内容

    printvector(v);

    v.pop_back(); //尾删

    printvector(v);

    v.erase(v.begin()); //删除

    printvector(v);

    v.erase(v.begin(), v.end());

    //cout.flush(); linux有效

    v.clear();

    if(v.empty())

    {

        cout << "为空" << endl;

    }

}

void test3()

{

    //逆序遍历

    vector<int> v;

    for(int i = 0; i < 10; i++)

    {

        v.push_back(i);

    }

    //printvector(v);

    //reverse_iterator 逆序迭代器

    for(vector<int>::reverse_iterator it = v.rbegin(); it != v.rend(); it++)

    {

        cout << * it << " ";

    }

    cout << endl;

    //vector迭代器是随机访问的迭代器 支持跳跃式访问

    vector<int>::iterator itbegin = v.begin();

    itbegin = itbegin+ 3;

    //上述写法不报错 这个迭代器支持随机访问



    //#include <list>

    // list<int> l;

    // for(int i = 0; i < 10; i++)

    // {

    //    l.push_back(i);

    // }

    // list<int>::iterator lit = l.begin();

    // lit = lit + 1; //不支持随机访问

}



void printvector(vector<int> & v)

{

    for(vector<int>:: iterator it = v.begin(); it != v.end(); it++)

    {

        cout << *it << " " << endl ;

    }

}

