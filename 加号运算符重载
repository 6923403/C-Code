运算符重载，就是对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。

运算符重载（operator overloading）只是一种”语法上的方便”，也就是它只是另一种函数调用的方式。

对于内置的数据类型的表示总的所有运算符是不可能改变的。

--------------------**

class person

{

public:

person()

{}

person(int a, int b) :m_a(a), m_b(b)

{

}

//+号运算符重载 成员函数 二元    ，无参数 一元

person operator+ (person & p)

{

person tmp;

tmp.m_a = this -> m_a + p.m_a;

tmp.m_b = this -> m_b + p.m_b;

return tmp;

}

int m_a;

int m_b;

};

void test1()

{

person p1(10, 110);

person p2(10, 10);

person p3 = p1 + p2;

cout << "p2 的 m_a = " << p3.m_a << endl;

cout << "p3 的 m_b = " << p3.m_b << endl;

}


-----*------------*
class person

{

public:

person()

{}

person(int a, int b) :m_a(a), m_b(b)

{

}

int m_a;

int m_b;

};

//运用全局函数 进行+号运算符的重载

person  operator+ (person & p1, person & p2) //二元

{

person tmp;

tmp.m_a = p1.m_a + p2.m_a;

tmp.m_b = p1.m_b + p2.m_b;

return tmp;

}

void test1()

{

person p1(10, 110);

person p2(10, 10);

person p3 = p1 + p2;  //p1 + p2 表达式。 p1.operator+(p2) operator+(p1, p2)

cout << "p2 的 m_a = " << p3.m_a << endl;

cout << "p3 的 m_b = " << p3.m_b << endl;

}
