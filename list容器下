
#include <list>

#include <string>

#include <algorithm>



void printlist(list<int> &m)

{

    for(list<int>::iterator it = m.begin(); it != m.end(); it++)

    {

        cout << *it << " " ;

    }

    cout << endl;

}

void test1()

{

    list<int> m(10, 10); //打印10个10

    list<int> m2(m.begin(), m.end());

    printlist(m); //10 10 10 ....

    printlist(m2); // 10 10 10...

    m2.push_back(666);



    //逆向打印

    for(list<int> ::reverse_iterator it2 = m2.rbegin(); it2 != m2.rend(); it2++)

    {

        cout << *it2 << " " ;

    }

    cout << endl;

    //list 迭代器不支持随机访问   

    // list<int>::iterator itbegin = m2.begin();

    // itbegin = itbegin + 1;

    //插入数据

    list<int> m3;

    m3.push_back(10); //尾插

    m3.push_back(20);

    m3.push_back(30);

    m3.push_front(66); //首插

    m3.push_front(77);

    printlist(m3); // 77 66 10 20 30 

    //删除一个数据

    m3.pop_back(); //尾删

    m3.pop_front(); //头删

    m3.insert(m3.begin(), 1000); //插入1000

    printlist(m3);

    m3.remove(20); //删除容器中指定元素

    printlist(m3);

}

void test2()

{

    //插入数据

    list<int> m3;

    m3.push_back(10); //尾插

    m3.push_back(20);

    m3.push_back(30);

    m3.push_front(66); //首插

    m3.push_front(77);

    cout << m3.size() << endl;

    if(m3.empty())

    {

        cout << "NULL " << endl;

    }

    else

    cout << "NO NULL " << endl ;

    m3.resize(10);

    printlist(m3);

    m3.resize(3);

    printlist(m3);

    list<int> m4;

    m4.assign(m3.begin(), m3.end());

    cout << "front " << m4.front() << endl;

    cout << "back " << m4.back() << endl;

}

bool mcompare(int v1, int v2)

{

    return v1 > v2;

}

void test3()

{

    list<int> k;

    k.push_back(10);

    k.push_back(20);

    k.push_back(30);

    k.push_back(40);

    k.reverse();

    printlist(k);

    //反转排序

    //sort(k.begin(), k.end()); //所有不支持随机访问的迭代器 不可以使用系统提供的算法

    k.sort(); //类内部会提供  从小到大排序

    printlist(k);

    //从大到小

    k.sort(mcompare);

    printlist(k);

}

//自定义数据类型

class person

{

    public:

    person(string name, int age, int height)

    {

        this -> m_name = name;

        this -> m_age = age;

        this -> m_height = height;

    }

    string m_name;

    int m_age;

    int m_height;

};

bool mcompareperson(person & p1, person & p2)

{

    // if(p1.m_age > p2.m_age) //年龄降序

    // {

    //    return true;

    // }

    // return false;

    //身高升序

    if(p1.m_age == p2.m_age)

    {

        return p1.m_height < p2.m_height;

    }

    else

    return p1.m_age > p2.m_age;

}

void test4()

{

    list<person> k;

    person p1("aaa", 10, 170);

    person p2("bbb", 20, 175);

    person p3("ccc", 20, 177);

    person p4("ddd", 40, 199);

    k.push_back(p1);

    k.push_back(p2);

    k.push_back(p3);

    k.push_back(p4);

    //打印数据按照年龄降序输出

    //自定义数据必须指定排序规则

    k.sort(mcompareperson);

    for(list<person> ::iterator it = k.begin(); it != k.end(); it++)

    {

        cout << "姓名： " << it -> m_name  << "年龄" << it -> m_age << endl;

        cout << "身高： " << it -> m_height << endl;

    }

}
