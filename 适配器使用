
#include <vector>

#include <algorithm>

#include <functional>

using namespace std;

// class myprint

// {

//    public:

//    void operator()(int s)

//    {

//        cout << s << endl;

//    }

// };

class myprint :public binary_function<int, int, void> //第二步 继承类 binary_function<int, int, void>

{

    public:

    void operator()(int s, int start) const //3 +const修饰operatpr

    {

        cout << s + start << endl;  //输出加num

    }

};

void test1()

{

    vector<int> s;

    for(int i = 10; i <= 16; i++)

    {

        s.push_back(i);

    }

    cout << "输入num " << endl;

    int num;

    cin >> num; //输出加num //利用适配器

    for_each(s.begin(), s.end(), bind2nd(myprint(), num)); //第一步 绑定数据 bind2nd start = num

    for_each(s.begin(), s.end(), bind1st(myprint(), num)); // s = num

}

// class greatethenten

// {

//    public:

//    bool operator()(int v)

//    {

//        return v > 5;

//    }

// };

class greatethenfive :public unary_function<int, bool>

{

    public:

    bool operator()(int v) const

    {

        return v > 5;

    }

};

//取反适配器

void test2()

{

    vector<int> d;

    for(int i = 0; i < 21; i++)

    {

        d.push_back(i);

    }

    //查找大于5的数字

  // vector<int> ::iterator pos = find_if(d.begin(), d.end(), greatethenten());

    //查找小于5的数字 //一元取反适配器 not1

  //  vector<int> ::iterator pos = find_if(d.begin(), d.end(), not1(greatethenfive()));

    vector<int> ::iterator pos = find_if(d.begin(), d.end(), not1(bind2nd(greater<int>(), 5)));

//两句功能相等

    if(pos != d.end())

    {

        cout << " num =  " << *pos << "  " << endl;

    }

    else

    {

        cout << "000" << endl;

    }

}

void myprint3(int v, int v2)

{

    cout << v + v2 << " " << endl;

}

//函数指针适配器

void test3()

{

    vector<int> w;

    for(int i = 0; i < 10; i++)

    {

        w.push_back(i);

    }

    //将函数指针适配为函数对象   

    for_each(w.begin(), w.end(), bind2nd(ptr_fun(myprint3),100));

}

//成员函数适配器

class person

{

    public:

    person(string name, int age)

    {

        this -> m_name = name;

        this -> m_age = age;

    }

    void showperson()

    {

        cout << m_name << " ";

        cout << m_age << endl;

    }

    void plusage()

    {

        this -> m_age = this -> m_age + 100;

    }

    string m_name;

    int m_age;

};

void myprintperson(person & p)

{

    cout << p.m_name << "  ";

    cout << p.m_age << endl;

}

void test4()

{

    vector<person> f; //对象实体

    person p1("aaa", 20);

    person p2("bbb", 30);

    person p3("ccc", 40);

    person p4("ddd", 50);

    person p5("eee", 60);

    f.push_back(p1);

    f.push_back(p2);

    f.push_back(p3);

    f.push_back(p4);

    f.push_back(p5);

    for_each(f.begin(), f.end(), myprintperson);



    //成员函数适配器

    for_each(f.begin(), f.end(), mem_fun_ref(&person::showperson));

    for_each(f.begin(), f.end(), mem_fun_ref(&person::plusage));

    for_each(f.begin(), f.end(), mem_fun_ref(&person::showperson));

}

void test5()

{

    vector<person *> f; //对象指针

    person p1("aaa", 20);

    person p2("bbb", 30);

    person p3("ccc", 40);

    person p4("ddd", 50);

    person p5("eee", 60);

    f.push_back(&p1);

    f.push_back(&p2);

    f.push_back(&p3);

    f.push_back(&p4);

    f.push_back(&p5);

    for_each(f.begin(), f.end(), myprintperson);



    //成员函数适配器

    for_each(f.begin(), f.end(), mem_fun(&person::showperson));

    for_each(f.begin(), f.end(), mem_fun(&person::plusage));

    for_each(f.begin(), f.end(), mem_fun(&person::showperson));

}
