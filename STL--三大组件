#include <vector>//容器vector

#include <algorithm> //使用系统算法的头文件

//迭代器 遍历功能 用指针解释

//普通指针也算一种迭代器

void test1()

{

    int array[5] = {1, 2, 3, 4, 5};

    int * p = array; //指针指向数组的首地址 &array【0】

    for (int i = 0; i < 5; i++)

    {

        cout << *(p++) << endl;

    }

}

void myprint(int v)

{

    cout << v << endl;

}

void test2()

{

    //声明容器

    vector<int> v; //声明一个容器 这个容器中存放Int类型数据 对象名称V

    //向容器中加入数据

    v.push_back(10);

    v.push_back(20);

    v.push_back(30);

    v.push_back(40);

    //遍历容器中的数据

    //利用迭代器

    vector<int>::iterator itbegin = v.begin(); //itbegin容器 指向V容器中的起始位置

    vector<int>::iterator itend = v.end(); //itend 容器 指向V容器中最后一个位置的下一个地址

    //一

    // while(itbegin != itend)

    // {

    //    cout << *itbegin << endl;

    //    itbegin++;

    // }

    //第二种遍历方式

    //for(int i = 0; i < 10; i++)

    // for(vector<int>::iterator it = v.begin(); it != v.end(); it++) //参考上面

    // {

    //    cout << * it << endl;

    // }

    //三、利用算法

    for_each(v.begin(), v.end(), myprint);

}

//操作自定义数据类型

class person

{

    public:

    person(string name, int age)

    {

        this -> m_name = name;

        this -> m_age = age;



    }

    string m_name;

    int m_age;

};

void test3()

{

    vector<person> v;

    person p1("sss", 20);

    person p2("ssa", 25);

    person p3("ssb", 30);

    person p4("ssc", 40);

    v.push_back(p1);

    v.push_back(p2);

    v.push_back(p3);

    v.push_back(p4);

    //遍历

    for(vector<person>::iterator it = v.begin(); it != v.end(); it++)

    {

        cout << "姓名 ： " << (*it).m_name << endl;

        cout << "年龄 ： " << it->m_age << endl;

    }

}

//存放自定义数据类型的指针

void test4()

{

    vector<person *> v;

    person p1("sss", 20);

    person p2("ssa", 25);

    person p3("ssb", 30);

    person p4("ssc", 40);

    v.push_back(&p1);

    v.push_back(&p2);

    v.push_back(&p3);

    v.push_back(&p4);

    for(vector<person *>::iterator it = v.begin(); it != v.end(); it++)

    {

        cout << "姓名：：" << (*it) -> m_name << endl;

        cout << "年龄：：" << (*it) -> m_age << endl;

    }

}

//容器嵌套容器

void test5()

{

    vector<vector<int>>v;

    vector<int>v1;

    vector<int>v2;

    vector<int>v3;



  for(int i = 0; i < 5; i++)

  {

      v1.push_back(i);

      v2.push_back(i+10);

      v3.push_back(i+100);

  }

  //将小容器放入大容器

  v.push_back(v1);

  v.push_back(v2);

  v.push_back(v3);

  //遍历所有数据

  for(vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++)

  {

      for(vector<int>::iterator vit = (*it).begin(); vit != (*it).end(); vit++)

      {

          cout << *vit << " ";         

      }

      cout << endl;

  }

}

