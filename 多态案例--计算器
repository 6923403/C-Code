//在多态中实现计算器

class abstractcalculator

{

public:

virtual int getresult()

{

return 0;

}

void set1(int v)

{

this -> val1 = v;

}

void set2(int v)

{

this -> val2 = v;

}

public:

int val1;

int val2;

};

//加法

class pluscalculator :public abstractcalculator

{

public:

virtual int getresult()

{

return val1 + val2;

}

};

//减法

class subcalculator :public abstractcalculator

{

virtual int getresult()

{

return val1 - val2;

}

};

//乘法

class multiplicationcalculator :public abstractcalculator

{

virtual int getresult()

{

return val1 * val2;

}

};

void test2()

{

abstractcalculator * abc;

//加法计算器

abc = new pluscalculator;

abc -> set1(42);

abc -> set2(32);

cout << abc -> getresult() << endl;

delete abc;

//减法计算器

abc = new subcalculator;

abc -> set1(42);

abc -> set2(32);

cout << abc -> getresult() << endl;

delete abc;

//乘法

abc =new multiplicationcalculator ;

abc -> set1(42);

abc -> set2(32);

cout << abc -> getresult() << endl;

delete abc;

}
