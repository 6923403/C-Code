class base

{

public:

base()

{

m_a = 100;

}

void func()

{

cout << "base func" << endl;

}

void func(int a)

{

cout << "base int a func" << endl;

}

int m_a;

};

class son :public base

{

public:

son()

{

m_a = 200;

}

void func()

{

cout << "son func" << endl;

}

int m_a;

};

void test1()

{

son s1;

cout << s1.m_a << endl;

//调用父类

cout << s1.base::m_a << endl;

//如果子类和父类拥有同名的函数 属性 子类不会覆盖父类的成员

s1.func();

//	s1.func(54); 如果子类和父类拥有同名的函数 子类会把父类的所有版本都隐藏掉

//想调用子类的方法必须加作用域

s1.base::func();

}

